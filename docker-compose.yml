# docker-compose.yml
version: '3.8'

services:
  db:
    image: postgis/postgis:15-3.4
    container_name: bas_db
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: bas_flights
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C.UTF-8"
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d bas_flights"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - bas_network

  redis:
    image: redis:7-alpine
    container_name: bas_redis
    restart: always
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    volumes:
      - redis_data:/data
    networks:
      - bas_network

  backend:
    build:
      context: ./PythonProject2
      dockerfile: Dockerfile
    container_name: bas_backend
    restart: always
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql+asyncpg://postgres:postgres@db:5432/bas_flights
      REDIS_URL: redis://redis:6379/0
      SECRET_KEY: your-very-secret-key-change-in-production
      PYTHONPATH: /app
    ports:
      - "8000:8000"
    volumes:
      - ./PythonProject2/app:/app/app
      - ./uploads:/app/uploads
      - ./reports:/app/reports
      - ./shapefiles:/app/shapefiles
    networks:
      - bas_network
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  frontend:
    image: node:18-alpine
    container_name: bas_frontend
    working_dir: /app
    restart: always
    environment:
      REACT_APP_API_URL: http://localhost:8000
      NODE_ENV: development
    ports:
      - "3000:3000"
    volumes:
      - ./frontend/bas_app:/app
      - /app/node_modules
    networks:
      - bas_network
    command: sh -c "npm install && npm start"

  nginx:
    image: nginx:alpine
    container_name: bas_nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - backend
      - frontend
    networks:
      - bas_network

networks:
  bas_network:
    driver: bridge

volumes:
  db_data:
  redis_data: